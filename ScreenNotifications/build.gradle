apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 18
        versionName "0.12.0"
    }

//    signingConfigs {
//        release {
//            storeFile file(System.properties['KEYSTORE_PATH'])
//            storePassword "PLACEHOLDER"
//            keyAlias System.properties['KEYSTORE_EMAIL']
//            keyPassword "PLACEHOLDER"
//        }
//    }

//    buildTypes {
//        release {
//            signingConfig signingConfigs.release
//        }
//    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.lukekorth:ez-loaders:1.3'
    compile 'com.lukekorth:mailable_log:0.1.3'
    compile 'fr.nicolaspomepuy:discreetapprate:2.0.3@aar'
}

// borrowed from https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
// and https://www.timroes.de/2013/09/22/handling-signing-configs-with-gradle/
//gradle.taskGraph.whenReady { taskGraph ->
    // Only execute when we are trying to assemble a release build
//    if(taskGraph.hasTask(':ScreenNotifications:assembleRelease') || taskGraph.hasTask(':ScreenNotifications:installRelease')) {
//        def password = System.console().readPassword("\nPlease enter key passphrase: ")
//
//        if(password.size() <= 0) {
//            throw new InvalidUserDataException("You must enter a password to proceed.")
//        }
//
//        // Must create String because System.readPassword() returns char[]
//        // (and assigning that below fails silently)
//        password = new String(password)
//
//        android.signingConfigs.release.storePassword = password
//        android.signingConfigs.release.keyPassword = password
//    }
//}
